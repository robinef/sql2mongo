<?php
namespace Sql2Mongo\Tests;

use Sql2Mongo;
/*
The MIT License (MIT)

Copyright (c) 2014 ROBINET Frederic

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/*
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-21.
 */
class QueryBuilderTest extends \PHPUnit_Framework_TestCase
{
	
	/**
	 * @const Brand 1 name
	 */
	const BRAND1_TEST = 'Audi';
	
	/**
	 * @cont Number of brand 1 items
	 */
	const BRAND1_COUNT = 2;
	
	/**
	 * @const Test date 1
	 */
	const DATE1 = '2014-02-16 00:00:00';
	/**
	 * @const Test date 2
	 */
	const DATE2 = '2014-02-10 00:00:00';
	/**
	 * @const Test date 3
	 */
	const DATE3 = '2014-02-01 00:00:00';
	/**
	 * @const Test date 4
	 */
	const DATE4 = '2014-02-05 00:00:00';
	
    /**
     * @var QueryBuilder
     */
    protected $object;

	/**
	 * @var MongoDB
	 */
	var $_mongo;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    	//From phpunit.xml config file
    	$addr = MONGO_ADDR;
	    $mongoClient = new \MongoClient($addr);
		$this->_mongo = $mongoClient->selectDB('unittests');
		$collection = $this->_mongo->selectCollection('cars');
        $this->object = new Sql2Mongo\QueryBuilder($this->_mongo);
        
        /**
         * Clean collection
         */
        $collection->remove(array());
        /**
         * Inject data in collection
         */
        $collection->insert(array("brand"=>"Audi", "model"=>"A3","count"=>3, 'date'=>new \MongoDate(strtotime(self::DATE1))));
        $collection->insert(array("brand"=>"Audi", "model"=>"Q5","count"=>76, 'date'=>new \MongoDate(strtotime(self::DATE2))));
        $collection->insert(array("brand"=>"Volkswagen", "model"=>"Polo","count"=>42, 'date'=>new \MongoDate(strtotime(self::DATE3))));
        $collection->insert(array("brand"=>"Volkswagen", "model"=>"Tiguan","count"=>84, 'date'=>new \MongoDate(strtotime(self::DATE4))));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers QueryBuilder::sum
     * @todo   Implement testSum().
     */
    public function testSum()
    {
		$this->object->select()->from('cars');
		$this->object->sum('count', 1);
		$this->object->group('brand');
		
		$cursor = $this->object->query();

		$testOk = false;
		foreach($cursor['retval'] as $curs) {
			
			if($curs['brand'] == 'Audi') {
				if($curs['countTotal'] == 79) {
					$testOk = true;
				} else {
					$testOk = false;
				}
			}
			if($curs['brand'] == 'Volkswagen') {
				if($curs['countTotal'] == 126) {
					$testOk = true;
				} else {
					$testOk = false;
				}
			}				
		}
		$this->assertEquals($testOk, true);
    }

    /**
     * @covers QueryBuilder::from
     * @todo   Implement testFrom().
     */
    public function testFrom()
    {
		$this->object->select()->from('cars');
		$count = $this->object->query()->count();
		$this->assertEquals(($count > 0), true);
    }

    /**
     * @covers QueryBuilder::where
     * Testing the where condition
     */
    public function testWhere()
    {
		$this->object->select()->from('cars')->where('brand','=',self::BRAND1_TEST);
		$count = $this->object->query()->count();
		$this->assertEquals(($count > 0), true);
    }

    /**
     * @covers QueryBuilder::limit
     * Testing limiting results number
     */
    public function testLimit()
    {
		$this->object->select()->from('cars')->where('brand','=',self::BRAND1_TEST)->limit(1);
		$cursor = $this->object->query();
		$count = 0;
		foreach($cursor as $curs) {$count++;}
		$this->assertEquals(($count == 1), true);
    }

    /**
     * @covers QueryBuilder::count
     * Test counting number of results
     */
    public function testCount()
    {
		$this->object->select()->from('cars')->where('brand','=',self::BRAND1_TEST);
		$count = $this->object->query()->count();
		$this->assertEquals(($count == self::BRAND1_COUNT), true);
    }

    /**
     * @covers QueryBuilder::between
     * Testing between conditions
     */
    public function testBetween()
    {
    	$d1 = '2014-02-15 00:00:00';
		$d2 = '2014-02-18 00:00:00';
    
		$this->object->select()->from('cars')->between('date', $d1, $d2);
		$count = $this->object->query()->count();
		$this->assertEquals(($count == 1), true);
    }

    /**
     * @covers QueryBuilder::group
     * Testing group results
     */
    public function testGroup()
    {
		$this->object->select()->from('cars');
		$this->object->sum('count',1);
		$this->object->group('brand');
		
		$cursor = $this->object->query();
		$testOk = false;

		foreach($cursor['retval'] as $curs) {	
			if($curs['brand'] == 'Audi') {
				if($curs['countTotal'] == 79) {
					$testOk = true;
				} else {
					$testOk = false;
				}
			}
			if($curs['brand'] == 'Volkswagen') {
				if($curs['countTotal'] == 126) {
					$testOk = true;
				} else {
					$testOk = false;
				}
			}				
		}
		$this->assertEquals($testOk, true);
    }

    /**
     * @covers QueryBuilder::order
     * Testing ordering results
     */
    public function testOrder()
    {
		$this->object->select()->from('cars')->where('brand','=',self::BRAND1_TEST)->order('count', Sql2Mongo\QueryBuilder::ORDER_DESC);
		$cursor = $this->object->query();
		foreach($cursor as $curs) {
			$this->assertEquals(($curs['count'] == 76), true);
			return;
		}
		
    }

}
